{"version":3,"sources":["components/Display.js","components/Buttons.js","App.js","index.js"],"names":["Display","formatHistory","string","parseInt","charAt","slice","id","this","props","input","output","Component","Buttons","className","onClick","calcResult","handleClick","clearCalc","math","window","App","e","updateInput","updateOutput","target","textContent","handleDecimal","includes","handleOperator","setState","state","number","Number","isInteger","inputStr","length","trimOperators","currentInput","split","i","pop","join","result","evaluate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19a07aa5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Display extends Component {\n\n    //trim 0 at the begining of the string\n    formatHistory = (string) => {\n     return parseInt(string.charAt(0), 10) == 0 ? string.slice(1) : string\n    }\n\n    render() {\n        return (\n        <div id=\"display-container\">\n          <div id=\"digit-history\">{this.formatHistory(this.props.input)}</div>\n        <div id=\"display\">{this.props.output}</div>\n        </div>\n        )\n    }\n}\n\nDisplay.propTypes = {\n  input: PropTypes.string.isRequired,\n  output: PropTypes.string.isRequired\n}\n\nexport default Display\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass Buttons extends Component {\n\n    render() {\n        return (\n        <div id=\"buttons\">\n            <div id=\"equals\" className=\"btn\" onClick={this.props.calcResult}>=</div>\n            <div id=\"zero\" className=\"btn\" onClick={this.props.handleClick}>0</div>\n            <div id=\"one\" className=\"btn\" onClick={this.props.handleClick}>1</div>\n            <div id=\"two\" className=\"btn\" onClick={this.props.handleClick}>2</div>\n            <div id=\"three\" className=\"btn\" onClick={this.props.handleClick}>3</div>\n            <div id=\"four\" className=\"btn\" onClick={this.props.handleClick}>4</div>\n            <div id=\"five\" className=\"btn\" onClick={this.props.handleClick}>5</div>\n            <div id=\"six\" className=\"btn\" onClick={this.props.handleClick}>6</div>\n            <div id=\"seven\" className=\"btn\" onClick={this.props.handleClick}>7</div>\n            <div id=\"eight\" className=\"btn\" onClick={this.props.handleClick}>8</div>\n            <div id=\"nine\" className=\"btn\" onClick={this.props.handleClick}>9</div>\n            <div id=\"add\" className=\"btn\" onClick={this.props.handleClick}>+</div>\n            <div id=\"subtract\" className=\"btn\" onClick={this.props.handleClick}>-</div>\n            <div id=\"multiply\" className=\"btn\" onClick={this.props.handleClick}>x</div>\n            <div id=\"divide\" className=\"btn\" onClick={this.props.handleClick}>/</div>\n            <div id=\"decimal\" className=\"btn\" onClick={this.props.handleClick}>.</div>\n            <div id=\"clear\" className=\"btn\" onClick={this.props.clearCalc}>C</div>\n        </div> \n        )\n    }\n}\n\nButtons.propTypes = {\n    calcResult: PropTypes.func.isRequired,\n    handleClick: PropTypes.func.isRequired,\n    clearCalc: PropTypes.func.isRequired\n  }\n\nexport default Buttons\n","import React, { Component } from 'react';\nimport Display from './components/Display';\nimport Buttons from './components/Buttons';\nimport './App.css';\n\n\nconst math = window.math;\nconst operatorsToHandle = '+x/';\nconst allOperators = '+x/*-'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      output: '0'\n    }\n  }\n\n  handleClick = (e) => {\n    this.updateInput(e);\n    this.updateOutput(e);\n  }\n\n  //updates input state which is a string that I use to calculate result\n  updateInput = (e) => {\n    //handle '.' decimal points\n    if (e.target.textContent === '.') {\n      this.handleDecimal()\n    //handle operators excluding minus (-) by checkin if string of operators that I want to handle includes entered character \n    } else if (operatorsToHandle.includes(e.target.textContent)) {\n      this.handleOperator(e.target.textContent)\n    //handle digits  \n    } else {\n      this.setState({\n        input: this.state.input + e.target.textContent \n      })\n    }\n  }\n\n  //updates output state which is used to show character entered as well as displaying result\n  updateOutput = (e) => {\n    //check if character entered is an integer    \n    const number = parseInt(e.target.textContent, 10);\n    if (Number.isInteger(number)){ \n      //update state by adding a number entered to the displayed state - if current state is 0 trim it \n      this.setState({\n        output: !parseInt(this.state.output.charAt(0), 10) > 0 ? this.state.output.slice(1) + e.target.textContent : this.state.output + e.target.textContent \n        });\n      //handle decimal point  \n    } else if (e.target.textContent === '.') {\n        this.handleDecimal()\n      //handle operators by updating state to entered operator only  \n      } else {\n        this.setState({\n        output: e.target.textContent \n        })\n      }\n  }\n\n  //handle decimal point\n  handleDecimal = () => {\n    //get current number value from state output and check if it includes '.' already then update input and output states\n    const currentValue = this.state.output;\n    const includesDecimal = currentValue.includes('.');\n    includesDecimal ? this.setState({output: this.state.output + '', input: this.state.input + ''}) : this.setState({output: this.state.output + '.', input: this.state.input + '.'})\n  }\n\n  //handle operators excluding minus so we can input negative values\n  handleOperator = (string) => {\n    const inputStr = this.state.input;\n    //if state input string ends with operator sign, get rid of them by calling trimOperators() then add operator entered (if its x replace it with *)\n    allOperators.includes(inputStr.charAt(inputStr.length - 1)) ? \n      this.setState({input: this.trimOperators() + (string === 'x' ? '*' : string)}) :\n      this.setState({input: inputStr + (string === 'x' ? '*' : string)})\n  }\n\n  //trim operators from the end of the state input and return trimmed string\n  trimOperators = () => {\n    const currentInput = this.state.input.split('');\n    for (let i = currentInput.length-1; i >= 0; i--) {\n      if (allOperators.includes(currentInput[i])) {currentInput.pop()} \n      else break;  \n    }\n    return currentInput.join('');\n  }\n\n  //calculate result by callin math.evaluate method form math.js library and update states - if string to be evaluated ends with operators trim it \n  calcResult = () => {\n    const result = math.evaluate( this.trimOperators());\n    this.setState({\n     input: `${result}`, \n     output: `${result}`\n    })\n  }\n\n  //clear results\n  clearCalc = () => {\n    this.setState({\n      input: '',\n      output: '0'\n    })\n  }\n\n  render() {\n    return (\n      <div id=\"calculator\">\n        <Display input={this.state.input} output={this.state.output}/>\n        <Buttons handleClick={this.handleClick} clearCalc={this.clearCalc} calcResult={this.calcResult}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}